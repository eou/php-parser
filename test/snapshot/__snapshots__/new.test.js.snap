// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`new #348 - byref usage deprecated 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": ByRef {
          "kind": "byref",
          "what": New {
            "arguments": Array [],
            "kind": "new",
            "what": ClassReference {
              "kind": "classreference",
              "name": "Foo",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [
    Error {
      "expected": undefined,
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected 'new' (T_NEW) on line 1",
      "token": "'new' (T_NEW)",
    },
  ],
  "kind": "program",
}
`;

exports[`new anonymous 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": Class {
          "body": Array [],
          "extends": null,
          "implements": null,
          "isAbstract": false,
          "isAnonymous": true,
          "isFinal": false,
          "kind": "class",
          "name": null,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new anonymous no parens 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": Class {
          "body": Array [],
          "extends": null,
          "implements": null,
          "isAbstract": false,
          "isAnonymous": true,
          "isFinal": false,
          "kind": "class",
          "name": null,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new anonymous with argument 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        ],
        "kind": "new",
        "what": Class {
          "body": Array [],
          "extends": null,
          "implements": null,
          "isAbstract": false,
          "isAnonymous": true,
          "isFinal": false,
          "kind": "class",
          "name": null,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new anonymous with multiple argument 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "one",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "two",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "three",
          },
        ],
        "kind": "new",
        "what": Class {
          "body": Array [],
          "extends": null,
          "implements": null,
          "isAbstract": false,
          "isAnonymous": true,
          "isFinal": false,
          "kind": "class",
          "name": null,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new no parens 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": ClassReference {
          "kind": "classreference",
          "name": "Foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new parent 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": ParentReference {
          "kind": "parentreference",
          "raw": "parent",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new self 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": SelfReference {
          "kind": "selfreference",
          "raw": "self",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new simple (2) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": ClassReference {
          "kind": "classreference",
          "name": "\\\\Foo",
          "resolution": "fqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new simple (3) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": ClassReference {
          "kind": "classreference",
          "name": "Foo\\\\Foo",
          "resolution": "qn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new simple (4) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": ClassReference {
          "kind": "classreference",
          "name": "\\\\Foo\\\\Foo",
          "resolution": "fqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new simple 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": ClassReference {
          "kind": "classreference",
          "name": "Foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new static 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": StaticReference {
          "kind": "staticreference",
          "raw": "static",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`new variable 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
